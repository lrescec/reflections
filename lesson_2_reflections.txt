What happens when you initialize a repository? Why do you need to do it?

-It creates a .git file and makes that repository and files in it available for tracking history.

How is the staging area different from the working directory and the repository? What value do you think it offers?

-staging area is a place in between those two, you put in it everything that's ready for commit and makes a logical unit. You can add files from one unit when you are done working on it and go on working on other files related to it and then when you're done with all of them, make a commit.

How can you use the staging area to make sure you have one commit per logical change?

-You can easily see what you're about to commit and add or remove files if you think they don't fit in that commit or if something's missing

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

-When you're adding or removing some features you don't want the original to have or lose. Also when you're trying some new approach and you don't know wheather you'll use it in the end.

How do the diagrams help you visualize the branch structure?

-With git log --graph branch1 branch2, you get all the commits from both branches in chronological order with branch name noted, so you can easily determine when the new branch was created and for example which of the commits of the master branch it doesn't include.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

-It is now just one branch with commits (and changes) from both of the branches. In the diagram it is shown which commits were made while the branches were seperated and which before and after the separation.